{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","onsuccess","e","target","result","bind","console","log","onerror","error","name","store","forEach","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,e;AAEXC,sB,GAAa,I;AAEbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAa;AAAA;;AACT,0BAAM,IAAIC,KAAJ,CAAU,qFAAV,CAAN;AACH;;;;oDAEsB;AACnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCZ,UAAhC;AACH,6BAFD;;AAIAO,wCAAYM,SAAZ,GAAwB,aAAK;AACzB,oCAAI,CAACb,UAAL,EAAgB;AACZA,iDAAac,EAAEC,MAAF,CAASC,MAAtB;AACAf,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAW;AAC1BiB,gDAAQC,GAAR,CAAY,iGAAZ;AACH,qCAFD;AAGH;AACDd,wCAAQL,UAAR;AACH,6BATD;;AAWAO,wCAAYa,OAAZ,GAAsB,aAAK;AACvBF,wCAAQC,GAAR,CAAYL,EAAEC,MAAF,CAASM,KAArB;AACAf,uCAAOQ,EAAEC,MAAF,CAASM,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAIH,yBAtBM,CAAP;AAuBH;;;kDAEqBtB,U,EAAY;AAC9BuB,8BAAMC,OAAN,CAAc,iBAAS;AACnB,gCAAGxB,WAAWyB,gBAAX,CAA4BC,QAA5B,CAAqCH,KAArC,CAAH,EAA+C;AAC3CvB,2CAAW2B,iBAAX,CAA6BJ,KAA7B;AACH;AACDvB,uCAAW4B,iBAAX,CAA6BL,KAA7B,EAAoC,EAACM,eAAgB,IAAjB,EAApC;AACH,yBALD;AAMH;;;sDAEuB;AACpB5B;AACAD,qCAAa,IAAb;AACAC,gCAAQ,IAAR;AACH","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\nconst version = 2;\nconst dbName = 'negociacoesDB';\n\nlet connection = null;\n\nlet close = null;\n\nexport class ConnectionFactory{\n\n    constructor(){\n        throw new Error('Você não pode criar instâncias de ConnectionFactory, utilize o método getConnection');\n    }\n\n    static getConnection (){\n        return new Promise((resolve, reject) => {\n            let openRequest = window.indexedDB.open(dbName, version);\n\n            openRequest.onupgradeneeded = e => {\n                ConnectionFactory._createStores(connection);\n            };\n\n            openRequest.onsuccess = e => {\n                if (!connection){\n                    connection = e.target.result;\n                    close = connection.close.bind(connection);\n                    connection.close = function() {\n                        console.log('Você não deve utilizar o método close do indexedDB, utilize ConnectionFactory.closeConnection()');\n                    }\n                }\n                resolve(connection);\n            };\n\n            openRequest.onerror = e => {\n                console.log(e.target.error);\n                reject(e.target.error.name);\n            };\n        });\n    }\n\n    static _createStores (connection) {\n        store.forEach(store => {\n            if(connection.objectStoreNames.contains(store)){\n                connection.deleteObjectStore(store);\n            }\n            connection.createObjectStore(store, {autoIncrement : true});    \n        });\n    }\n\n    static closeConnection(){\n        close();\n        connection = null;\n        close = null;\n    }\n}"]}