{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","onsuccess","e","target","result","bind","console","log","onerror","error","name","store","forEach","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAW;AAChC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,eAAf;;AAEA,QAAIC,aAAa,IAAjB;;AAEA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAa;AAAA;;AACT,kBAAM,IAAIC,KAAJ,CAAU,qFAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM2B;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,0CAAkBe,aAAlB,CAAgCX,UAAhC;AACH,qBAFD;;AAIAM,gCAAYM,SAAZ,GAAwB,aAAK;AACzB,4BAAI,CAACZ,UAAL,EAAgB;AACZA,yCAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAW;AAC1BgB,wCAAQC,GAAR,CAAY,iGAAZ;AACH,6BAFD;AAGH;AACDd,gCAAQJ,UAAR;AACH,qBATD;;AAWAM,gCAAYa,OAAZ,GAAsB,aAAK;AACvBF,gCAAQC,GAAR,CAAYL,EAAEC,MAAF,CAASM,KAArB;AACAf,+BAAOQ,EAAEC,MAAF,CAASM,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAIH,iBAtBM,CAAP;AAuBH;AA9BL;AAAA;AAAA,0CAgC0BrB,UAhC1B,EAgCsC;AAC9BsB,sBAAMC,OAAN,CAAc,iBAAS;AACnB,wBAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCH,KAArC,CAAH,EAA+C;AAC3CtB,mCAAW0B,iBAAX,CAA6BJ,KAA7B;AACH;AACDtB,+BAAW2B,iBAAX,CAA6BL,KAA7B,EAAoC,EAACM,eAAgB,IAAjB,EAApC;AACH,iBALD;AAMH;AAvCL;AAAA;AAAA,8CAyC4B;AACpB3B;AACAD,6BAAa,IAAb;AACAC,wBAAQ,IAAR;AACH;AA7CL;;AAAA;AAAA;AAgDH,CAzDuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function() {\n    const stores = ['negociacoes'];\n    const version = 2;\n    const dbName = 'negociacoesDB';\n\n    let connection = null;\n\n    let close = null;\n\n    return class ConnectionFactory{\n\n        constructor(){\n            throw new Error('Você não pode criar instâncias de ConnectionFactory, utilize o método getConnection');\n        }\n\n        static getConnection (){\n            return new Promise((resolve, reject) => {\n                let openRequest = window.indexedDB.open(dbName, version);\n\n                openRequest.onupgradeneeded = e => {\n                    ConnectionFactory._createStores(connection);\n                };\n\n                openRequest.onsuccess = e => {\n                    if (!connection){\n                        connection = e.target.result;\n                        close = connection.close.bind(connection);\n                        connection.close = function() {\n                            console.log('Você não deve utilizar o método close do indexedDB, utilize ConnectionFactory.closeConnection()');\n                        }\n                    }\n                    resolve(connection);\n                };\n\n                openRequest.onerror = e => {\n                    console.log(e.target.error);\n                    reject(e.target.error.name);\n                };\n            });\n        }\n\n        static _createStores (connection) {\n            store.forEach(store => {\n                if(connection.objectStoreNames.contains(store)){\n                    connection.deleteObjectStore(store);\n                }\n                connection.createObjectStore(store, {autoIncrement : true});    \n            });\n        }\n\n        static closeConnection(){\n            close();\n            connection = null;\n            close = null;\n        }\n    }\n\n})();"]}