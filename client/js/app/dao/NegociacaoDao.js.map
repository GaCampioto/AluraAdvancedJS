{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","cursor","openCursor","negociacoes","atual","e","target","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;IAAMA,a;AAEF,2BAAYC,UAAZ,EAAwB;AAAA;;AAEpB,aAAKC,WAAL,GAAmBD,UAAnB;AACA,aAAKE,MAAL,GAAc,aAAd;AACH;;;;iCAEQC,U,EAAY;AAAA;;AAEjB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIC,UAAU,MACTN,WADS,CAETO,WAFS,CAEG,CAAC,MAAKN,MAAN,CAFH,EAEiB,WAFjB,EAGTO,WAHS,CAGG,MAAKP,MAHR,EAITQ,GAJS,CAILP,UAJK,CAAd;;AAMAI,wBAAQI,SAAR,GAAoB;AAAA,2BAAKN,SAAL;AAAA,iBAApB;AACAE,wBAAQK,OAAR,GAAkB;AAAA,2BAAKN,OAAO,yCAAP,CAAL;AAAA,iBAAlB;AACH,aATM,CAAP;AAUH;;;sCAEa;AAAA;;AACV,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIO,SAAS,OACRZ,WADQ,CAERO,WAFQ,CAEI,CAAC,OAAKN,MAAN,CAFJ,EAEkB,WAFlB,EAGRO,WAHQ,CAGI,OAAKP,MAHT,EAIRY,UAJQ,EAAb;;AAMA,oBAAIC,cAAc,EAAlB;;AAEAF,uBAAOF,SAAP,GAAmB,aAAK;AACpB,wBAAIK,QAAQC,EAAEC,MAAF,CAASC,MAArB;AACA,wBAAIH,KAAJ,EAAU;AACN,4BAAII,OAAOJ,MAAMK,KAAjB;AACAN,oCAAYO,IAAZ,CAAiB,IAAIC,UAAJ,CAAeH,KAAKI,KAApB,EAA2BJ,KAAKK,WAAhC,EAA6CL,KAAKM,MAAlD,CAAjB;AACAV,8BAAMW,QAAN;AACH,qBAJD,MAIO;AACHtB,gCAAQU,WAAR;AACH;AACJ,iBATD;;AAWAF,uBAAOD,OAAP,GAAiB;AAAA,2BAAKN,OAAO,iDAAP,CAAL;AAAA,iBAAjB;AACH,aArBM,CAAP;AAuBH;;;sCAEa;AAAA;;AACV,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIO,SAAS,OACRZ,WADQ,CAERO,WAFQ,CAEI,CAAC,OAAKN,MAAN,CAFJ,EAEkB,WAFlB,EAGRO,WAHQ,CAGI,OAAKP,MAHT,EAIR0B,KAJQ,EAAb;;AAMAf,uBAAOF,SAAP,GAAmB;AAAA,2BAAKN,QAAQ,kCAAR,CAAL;AAAA,iBAAnB;;AAEAQ,uBAAOD,OAAP,GAAiB;AAAA,2BAAKN,OAAO,wCAAP,CAAL;AAAA,iBAAjB;AACH,aAVM,CAAP;AAWH","file":"NegociacaoDao.js","sourcesContent":["class NegociacaoDao {\n\n    constructor(connection) {\n\n        this._connection = connection;\n        this._store = 'negociacoes';\n    }\n\n    adiciona(negociacao) {\n\n        return new Promise((resolve, reject) => {\n            let request = this\n                ._connection\n                .transaction([this._store],\"readwrite\")\n                .objectStore(this._store)\n                .add(negociacao);\n\n            request.onsuccess = e => resolve();\n            request.onerror = e => reject('Não foi possível adicionar a negociação');\n        });\n    }\n\n    listarTodos() {\n        return new Promise((resolve, reject) => {\n            let cursor = this\n                ._connection\n                .transaction([this._store],\"readwrite\")\n                .objectStore(this._store)\n                .openCursor();\n\n            let negociacoes = [];\n\n            cursor.onsuccess = e => {\n                let atual = e.target.result;\n                if (atual){\n                    let dado = atual.value;\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\n                    atual.continue();\n                } else {\n                    resolve(negociacoes);\n                }\n            };\n\n            cursor.onerror = e => reject('Não foi possível recuperar todas as negociações');\n        });\n\n    }\n\n    apagarTodos() {\n        return new Promise((resolve, reject) => {\n            let cursor = this\n                ._connection\n                .transaction([this._store],\"readwrite\")\n                .objectStore(this._store)\n                .clear();\n\n            cursor.onsuccess = e => resolve('Negociações apagadas com sucesso');\n\n            cursor.onerror = e => reject('Não foi possível apagar as negociacões');\n        });\n    }\n}"]}